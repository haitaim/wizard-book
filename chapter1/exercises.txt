Exercise 1.1:
10 -> 10

(+ 5 3 4) -> 12

(- 9 1) -> 8

(/ 6 2) -> 3

(+ (* 2 4) (- 4 6)) -> 6

(define a 3) ->

(define b (+ a 1)) ->

(+ a b (* a b)) -> 19

(= a b) -> #f

(if (and (> b a) (< b (* a b)))
    b
    a)
-> 4

(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))
-> 16

(+ 2 (if (> b a) b a)) -> 6

(* (cond ((> a b) a)
         ((< a b) b)
         (else - 1))
   (+ a 1))
-> 16

Exercise 1.2:
(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 3)))))
   (* 3 (- 6 2) (-2 7)))

Exercise 1.3: In seperate file

Exercise 1.4:
The compound expression operator will return a primitive procedure depending on
the result of the if expression. If b > 0, then the expression will evaluate to
the addition procedure. Otherwise, the expression will evaluate to the
subtraction procedure.

Exercise 1.5:
In applicative-order evaluation, the interpreter will crash. The interpreter
will first call p before expanding test. p is a procedure whose definition is to
call itself. This leads to infinite recursion, which is the root of why the
program crashed.

In normal-order evaluation, the interpreter will return 0. The interpreter will
expand test first, which avoids evaluating p. x is 0, so the if expression will
return 0.

Exercise 1.6:
If expressions will only evaluate the expression selected by the predicate,
whereas new-if will evaluate both. Because the else clause uses recursion,
the new-if version will preform infinite recursion and eventually crash.

Exercise 1.7:
For smaller numbers, good-enough? does not have a provide a very high amount of
precision to pass. For example, (sqrt 9) should result in 3, but will instead
evaluate to 3.00009155413138. When dealing with large numbers, the lack of
precision means that finding the difference of two numbers becomes unfeasible
for small amounts.

The new version of good-enough? is in exercise1_7.rkt.

The new method was more accurate for smaller numbers, but actually worse for
large numbers.

Exercise 1.8:
My implementation is in exercise1_8.rkt. However, DrRacket pretty much blew up
when I tried testing it. Sometime in the future, I should try to see if I can
get it working.

